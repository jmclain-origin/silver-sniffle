name: test, build, bundle, ship and deploy...?

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  workflow_dispatch:

jobs:
  test:
    runs-on: ubuntu-latest
    environment: 
      name: ${{ github.base_ref == 'main' && 'production' || github.base_ref == 'dev' && 'development' }}
    strategy:
      matrix:
        node-version: [18, 20, 22]
    name: TESTING
    steps:
      - uses: actions/checkout@v4
      - name: Checkout and Setup  
        uses: pnpm/action-setup@v4
        with:
          version: 9
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'pnpm'
      - name: Check for cached modules
        uses: actions/cache/restore@v4
        id: cache
        with:
          path: 'node-modules'
          key: ${{ runner.os }}-modules-${{ hashFiles('package.json') }}

        if: steps.cache.outputs.cache-hit!= 'true'
      - name: Installin dependencies
        run: pnpm install

      - name: Running tests
        run: pnpm run test
      - name: Cache resoures
        uses: actions/cache/save@v4
        with:
          path: 'node-modules'
          key: ${{ runner.os }}-modules-${{ hashFiles('package.json') }}
  build:
    runs-on: ubuntu-latest
    needs: test
    environment: 
      name: ${{ github.base_ref == 'main' && 'production' || github.base_ref == 'dev' && 'development' }}
    strategy:
      matrix:
        node-version: [22]
    name: BUILDING
    steps:
      - uses: actions/checkout@v4
      - name: Checkout and Setup  
        uses: pnpm/action-setup@v4
        with:
          version: 9
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'pnpm'
      - name: Get chached dependencies
        uses: actions/cache/restore@v4
        id: 'cache-deps'
        with: 
          path: 'node-modules'
          key: ${{ runner.os }}-modules-${{ hashFiles('package.json') }}
        if: steps.cache-deps.outputs.cache-hit != 'true'
      - name: Installin dependencies
        run: pnpm install

      - name: Building application
        run: pnpm run build
      - name: Cache resoures
        uses: actions/cache/save@v4
        id: build-cache
        with:
          path: 'build'
          key: ${{ runner.os }}-build-${{ hashFiles('src/**') }}

  docker:
    runs-on: ubuntu-latest
    needs: build
    environment: 
      name: ${{ github.base_ref == 'main' && 'production' || github.base_ref == 'dev' && 'development' }}
    steps:
      - uses: actions/checkout@v4
      - name: Get cached build
        uses: actions/cache/restore@v4
        id: build-cache
        with:
          path: 'build'
          key: ${{ runner.os }}-build-${{ hashFiles('src/**') }}
      - name: Build docker image
        run: |
          docker build --file Dockerfile -t latest .
          docker save -o app.tar.gz latest
      - name: Save docker cache
        uses: actions/cache/save@v4
        id: docker-cache
        with: 
          path: 'app.tar.gz'
          key: ${{ runner.os }}-docker-${{ hashFiles('src/**') }}

  deploy:
    runs-on: ubuntu-latest
    needs: docker
    environment:
      name: ${{ github.ref_name == 'main' && 'Production' || github.ref_name == 'dev' && 'Development' }}
      url: https://${{ github.base_ref == 'refs/heads/main' && '' || github.ref == 'refs/heads/dev' && 'dev-' }}domian.com
    steps:
      - name: restore cache
        uses: actions/cache/restore@v4
        id: docker-cache
        with:
          path: "app.tar.gz"
          key: ${{ runner.os }}-docker-${{ hashFiles('src/**') }}
      - name: Set permissions
        run: chmod 644 app.tar.gz

      # - name: Transfer bundle to host
      #   id: transfer
      #   uses: appleboy/scp-action@v0.1.7
      #   with:
      #     host: ${{ secrets.EC2_HOST }}
      #     username: ${{ secrets.EC2_USER }}
      #     key: ${{ secrets.EC2_KEY }}
      #     source: "**.tar.gz"
      #     target: "~/app"
      # - name: Deploy to EC2
      #   if : steps.transfer.outcome =='success'
      #   uses: appleboy/ssh-action@v0.1.5
      #   with:
      #     host: ${{ secrets.EC2_HOST }}
      #     username: ${{ secrets.EC2_USER }}
      #     key: ${{ secrets.EC2_KEY }}
      #     script: |
      #         cd ~/app
      #         sudo docker stop application
      #         sudo docker system prune -a -f
      #         sudo docker load -i app.tar.gz
      #         sudo docker run -d -p 3000:3000 --name app app:latest   
